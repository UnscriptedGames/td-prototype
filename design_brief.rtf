{\rtf1\ansi\deff0
{\b Tower Defence Prototype Design Brief}\par
\par
{\b Overview}\par
This document outlines the design for a modular, high-performance 2D tower defence game prototype built in Godot 4.4.x using GDScript. The project prioritises code reusability, memory management, and expandability, with placeholder assets and beginner-friendly systems.\par
\par
{\b 1. Map with Single Enemy Path2D}\par
- The main level uses a Sprite2D background for simplicity.\par
- Enemy movement is defined by a Path2D node, editable in the Godot editor.\par
- Visual accents (trees, rocks, etc.) are instanced as Sprite2D nodes under a YSort node for 2.5D depth.\par
- Buildable areas are marked with invisible Area2D nodes or collision shapes on grass.\par
- While the ghost tower is active, buildable areas become visible on the map (e.g., highlighted or outlined) so the player can see where towers can be placed.\par
- The ghost tower also changes colour depending on whether the location is valid or not.\par
- Level data is stored in a custom resource file, detailing wave count and enemy spawns.\par
\par
{\b 2. Basic Tower Type}\par
- Towers are Node2D scenes with a container for visuals (Node2D or Sprite2D).\par
- Range detection uses Area2D and CollisionShape2D (circle).\par
- The final, placed tower scene does not include buildable area detection.\par
- All placement logic (checking for buildable area and overlap) is handled by the ghost tower during placement, keeping the placed tower scene clean.\par
- Tower stats (fire rate, damage, projectile, etc.) are stored in a custom resource file.\par
- Building uses a ghost tower that follows the mouse, visually shows range, and indicates valid/invalid placement.\par
- Simple UI button for building towers (to be replaced by card system later).\par
- Clicking on a built tower visually indicates selection (e.g., outline or highlight), displays the tower's range indicator, and shows a Sell Tower button above the build button. Pressing Sell Tower removes the selected tower from the game.\par
\par
{\b 3. Basic Enemy Type}\par
- Enemies are Area2D scenes with AnimatedSprite2D and CollisionShape2D as children.\par
- Enemy stats (health, speed, reward, visuals, etc.) are stored in a custom resource file.\par
- Movement along Path2D uses PathFollow2D, with speed variable.\par
- AnimatedSprite2D uses 5 directions: up, down, left, up-left, down-left. Left is flipped for right, up-left for up-right, and down-left for down-right.\par
- Direction is calculated and mapped to the correct animation, with horizontal flipping as needed.\par
- Signals for death and reaching the end allow modular game logic.\par
- Pooling support: enemies reset state when reused.\par
\par
{\b 4. Basic UI}\par
- UI is a CanvasLayer scene with Label nodes for health, currency, and wave.\par
- UI updates via signals or a singleton managing game state.\par
- Placeholder fonts and visuals.\par
\par
{\b 5. Placeholder Assets}\par
- Simple shapes or basic sprites for all visuals.\par
- Assets organised in a clear folder structure (assets/sprites/, assets/sounds/, etc.).\par
- Subfolders for towers, enemies, UI, and effects.\par
\par
{\b 6. Object Pooling}\par
- Generic object pool system for enemies and projectiles.\par
- Pools created at game start; objects reused instead of instanced.\par
- Pooling logic ensures objects reset state on reuse.\par
- Designed for future expansion (e.g., effects, pickups).\par
\par
{\b 7. Inheritance for Code Reusability}\par
- Base classes for towers, enemies, and projectiles.\par
- Child classes override only necessary behaviour.\par
- Signals used for communication to reduce coupling.\par
- Code and resource files documented for clarity and future expansion.\par
- Performance and memory management prioritised in all systems.\par
\par
{\b Structured Approach}\par
1. Set up project folder structure and placeholder assets.\par
2. Build the main map scene with Sprite2D background, Path2D, and YSort for accents.\par
3. Implement buildable area detection using Area2D/collision shapes.\par
4. Create base enemy and tower scenes, with resource files for stats.\par
5. Set up enemy movement along Path2D and direction-based animation logic.\par
6. Implement tower placement system with ghost tower and range visualisation.\par
7. Add basic UI for health, currency, and wave tracking.\par
8. Integrate object pooling for enemies and projectiles.\par
9. Ensure all systems use inheritance and signals for modularity.\par
10. Test and iterate on core gameplay; expand with stretch goals as needed.\par
\par
{\b Scene Structure}\par
- Main scene: Node2D (root), Sprite2D (background), Path2D, YSort (accents), UI (CanvasLayer), buildable areas (Area2D).\par
- Enemy scene: Area2D, AnimatedSprite2D, CollisionShape2D.\par
- Tower scene: Node2D, Sprite2D container, Area2D (range), Area2D (buildable check).\par
- UI scene: CanvasLayer, Label nodes.\par
\par
{\b Notes}\par
- All code will follow Godot 4.4.x and provided style guidelines.\par
- Placeholder assets will be replaced as development progresses.\par
- Stretch goals (card system, advanced towers/enemies, polish) will be addressed after the prototype is playable.\par
\par
{\b Game State Management}\par
- Central game state (player health, currency, wave number, etc.) is managed by an Autoload singleton script called GameManager.\par
- GameManager emits signals (e.g., health_changed, currency_updated) for UI and other systems to listen and update accordingly.\par
- This pattern ensures robust, decoupled, and scalable game state management throughout the project.\par
\par
{\b Further Improvement Suggestions}\par
- Use consistent, descriptive node names and scene structures for all major systems.\par
- Consider adding a dedicated HUD node under UI for all in-game overlays, making it easier to expand UI features later.\par
- Use custom Resource scripts and .tres files for level, tower, and enemy data to allow easy editing in the Godot inspector.\par
- Document all custom signals in scripts for clarity and maintainability.\par
- Add debug toggles and overlays (e.g., show collision shapes, print game state changes) to help during development.\par
- Organise assets by type and usage from the outset (e.g., assets/towers/, assets/enemies/, assets/ui/, assets/effects/, assets/sounds/, assets/backgrounds/).\par
- Place placeholder assets in their final intended folders for easy replacement.\par
- Leave comments or TODOs in the design brief and code for planned future features and stretch goals.\par
- Profile the game early using Godot's debugger and profiler tools, especially object pooling and signal usage, to catch any bottlenecks before adding complexity.\par
- Keep the design brief and code comments up to date as the project evolves.\par
\par
{\b Prototype Folder Structure}\par
project-root/\par
│\par
├── Assets/\tab\tab\tab # Global assets reused across the game\par
│   ├── Audio/\par
│   ├── Fonts/\par
│   ├── Sprites/\par
│   ├── Textures/\par
│   └── Particles/\par
│\par
├── Config/\tab\tab\tab # Data assets for settings (.tres, .json), e.g. game balance, difficulty\par
│   ├── Levels/\par
│   ├── Towers/\par
│   ├── Enemies/\par
│   └── Waves/\par
│\par
├── Systems/\tab\tab\tab # Global logic, autoloads, and reusable gameplay systems\par
│   ├── GameManager/\par
│   ├── SceneManager/\par
│   └── GlobalSignals/\par
│\par
├── Entities/\tab\tab\tab # All towers, enemies, projectiles, and world objects\par
│   ├── Towers/\par
│   ├── Enemies/\par
│   └── Projectiles/\par
│\par
├── Levels/\tab\tab\tab # Game levels, scenes, and environmental assets\par
│   ├── MainLevel/\par
│   └── Tilesets/\par
│\par
├── UI/\tab\tab\tab\tab # Menus, HUDs, and all user interface elements\par
│   ├── MainMenu/\par
│   ├── HUD/\par
│   └── Components/\par
│\par
├── Tests/\tab\tab\tab # Experimental scenes and prototypes\par
│   └── Prototypes/\par
│       ├── EnemyPathfinding.tscn\par
│       ├── TowerPlacement.tscn\par
│       └── UISystemTest.tscn\par
\par
{\b Stretch Goals}\par
- Implement a card system for tower and enemy selection.\par
- Add advanced tower and enemy types with unique abilities.\par
- Create polished UI and UX elements, replacing all placeholder assets.\par
- Integrate audio effects and music.\par
- Develop a level editor and modding support.\par
- Optimise performance for target platforms.\par
- Expand documentation and tutorials for users and developers.\par
\par
{\b Prototype TODO List}\par
1. Set up the agreed folder structure in the project. \b (Complete)\b0\par
2. Create placeholder assets and organise them in the correct folders.\par
3. Build the main map scene:\par
   - Add Sprite2D background.\par
   - Add Path2D for enemy movement.\par
   - Add YSort node for visual accents.\par
   - Add buildable area indicators (Area2D/collision shapes).\par
4. Implement buildable area visibility and ghost tower logic:\par
   - Show buildable areas when placing towers.\par
   - Create ghost tower with range indicator and colour feedback.\par
   - Check for valid placement and overlap.\par
5. Create base tower scene and data resource:\par
   - Add container for visuals.\par
   - Add Area2D for range detection.\par
   - Connect to projectile system.\par
   - Store tower stats in resource file.\par
6. Create base enemy scene and data resource:\par
   - Use Area2D as root.\par
   - Add AnimatedSprite2D and CollisionShape2D.\par
   - Implement movement along Path2D.\par
   - Add direction-based animation logic.\par
   - Store enemy stats in resource file.\par
7. Implement object pooling for enemies and projectiles.\par
8. Build basic UI:\par
   - Add CanvasLayer and HUD elements (health, currency, wave).\par
   - Connect UI to GameManager signals.\par
9. Implement GameManager autoload for game state management.\par
10. Add tower selection and Sell Tower functionality:\par
    - Show range indicator and selection highlight.\par
    - Add Sell Tower button and removal logic.\par
11. Add test scenes in Tests/Prototypes for key systems (enemy pathfinding, tower placement, UI).\par
12. Profile performance and debug using Godot tools.\par
13. Update documentation and design brief as development progresses.\par
}
